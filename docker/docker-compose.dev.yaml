services:
  app:  # Define the 'app' service for the Next.js application
    container_name: ${CONTAINER_NAME}  # Set the container name using the environment variable CONTAINER_NAME
    build:  # Build the Docker image using the specified Dockerfile
      context: ..  # Set the build context to the parent directory to access the Dockerfile in the root directory
      dockerfile: Dockerfile.nextjs  # Specify the Dockerfile to use for building the image
      args:
        NODE_ENV: ${NODE_ENV}  # Pass the value of NODE_ENV as a build argument to the Dockerfile
    ports:
      - ${PORT}  # Map a port on the host to a port inside the container
    env_file:
      - ${ENV_FILE}  # Use an environment variable to specify the .env file
    command: >
      sh -c "if [ \"$NODE_ENV\" = 'development' ]; then npm run dev; else npm start; fi"  # Conditional command based on NODE_ENV
      # If NODE_ENV is 'development', it runs npm run dev (for development mode).
      # Otherwise, it runs npm start (for production mode).

  # nginx:  # Define the Nginx service
  #   image: nginx:latest  # Use the latest version of the official Nginx image
  #   container_name: jorge-nextjs-portfolio-nginx-dev  # Name of the Nginx container
  #   build:
  #     context: ./nginx/  # Set the build context to the nginx directory
  #     dockerfile: Dockerfile.nginx  # Specify the Dockerfile to use for building Nginx
  #     args:
  #       NGINX_CONF: ${NGINX_CONF}  # Pass the NGINX_CONF argument to the build process
  #       CERTS_DIR: ${CERTS_DIR}  # Pass the CERTS_DIR argument to the build process
  #   ports:
  #     - ${NGINX_PORT}  # Map port 443 on the host to port 443 inside the container
  #   volumes:
  #     - ./nginx/nginx.conf.dev:/etc/nginx/nginx.conf  # Mount the development configuration file for Nginx
  #     - ${CERTS_DIR}:/etc/ssl/certs  # Mount the directory containing SSL certificates
  #   depends_on:
  #     - app  # Ensure that Nginx starts after the Next.js app