name: CD-Workflow

# This CD (Continuous Deployment) workflow is triggered by another workflow using `workflow_call`.
# It automates the deployment of the Next.js portfolio app to a remote server based on the target branch.
on:
  workflow_call:
    inputs:
      deploy_branch:
        required: true
        type: string
    secrets:
      # SSH credentials for each environment
      SERVER_IP_DEV: { required: true }
      SERVER_USER_DEV: { required: true }
      SERVER_SSH_KEY_DEV: { required: true }

      SERVER_IP_QA: { required: true }
      SERVER_USER_QA: { required: true }
      SERVER_SSH_KEY_QA: { required: true }

      SERVER_IP_PROD: { required: true }
      SERVER_USER_PROD: { required: true }
      SERVER_SSH_KEY_PROD: { required: true }

      # Application and NGINX secrets per environment (dev, qa, prod)
      # Includes Docker image, ports, environment file name, and custom NGINX variables
      # Secrets for DEV branch
      ENV_VARS_DEV_CD: { required: true }

      # Secrets for QA branch
      ENV_VARS_QA_CD: { required: true }

      # Secrets for PROD (main) branch
      ENV_VARS_PROD_CD: { required: true }

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set branch and server variables
        # Determines which environment the deployment is targeting and sets appropriate server credentials
        id: vars
        run: |
          BRANCH="${{ inputs.deploy_branch }}"
          echo "DEPLOY_BRANCH=$BRANCH" >> $GITHUB_ENV
          mkdir -p $HOME/.ssh

          if [[ "$BRANCH" == "dev" ]]; then
            # Load SSH credentials for dev environment
            echo "SERVER_IP=${{ secrets.SERVER_IP_DEV }}" >> $GITHUB_ENV
            echo "SERVER_USER=${{ secrets.SERVER_USER_DEV }}" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "qa" ]]; then
            # Load SSH credentials for QA environment
            echo "SERVER_IP=${{ secrets.SERVER_IP_QA }}" >> $GITHUB_ENV
            echo "SERVER_USER=${{ secrets.SERVER_USER_QA }}" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "main" ]]; then
            # Load SSH credentials for production environment
            echo "SERVER_IP=${{ secrets.SERVER_IP_PROD }}" >> $GITHUB_ENV
            echo "SERVER_USER=${{ secrets.SERVER_USER_PROD }}" >> $GITHUB_ENV
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi

      - name: Pull latest code and create .env file in remote server
        # Connects to the server using SSH and updates code from Git, then creates environment variables dynamically
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ inputs.deploy_branch == 'dev' && secrets.SERVER_SSH_KEY_DEV || 
                  inputs.deploy_branch == 'qa' && secrets.SERVER_SSH_KEY_QA || 
                  inputs.deploy_branch == 'main' && secrets.SERVER_SSH_KEY_PROD }}
          port: 22
          script: |
            DEPLOY_BRANCH="${{ inputs.deploy_branch }}"
            cd /var/www/jorge-nextjs-portfolio/
            git pull origin $DEPLOY_BRANCH

            mkdir -p env/$DEPLOY_BRANCH
            echo "${{ inputs.deploy_branch == 'dev' && secrets.ENV_VARS_DEV_CD || inputs.deploy_branch == 'qa' && secrets.ENV_VARS_QA_CD || inputs.deploy_branch == 'main' && secrets.ENV_VARS_PROD_CD }}" > env/$DEPLOY_BRANCH/cd.env

            # Environment context passed to the SSH script so it can reference the right secrets
        env:
          # Environment secrets for DEV / QA / PROD (all preloaded for reuse above)
          DEPLOY_BRANCH: ${{ inputs.DEPLOY_BRANCH }}

      - name: Run Makefile to lift containers on remote
        # Executes Makefile target that brings up the Docker Compose setup remotely
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ inputs.deploy_branch == 'dev' && secrets.SERVER_SSH_KEY_DEV || 
                  inputs.deploy_branch == 'qa' && secrets.SERVER_SSH_KEY_QA || 
                  inputs.deploy_branch == 'main' && secrets.SERVER_SSH_KEY_PROD }}
          port: 22
          script: |
            DEPLOY_BRANCH="${{ inputs.deploy_branch }}"
            cd /var/www/jorge-nextjs-portfolio
            # Run environment-specific Makefile command to build and start containers
            set -a
            source env/$DEPLOY_BRANCH/.env.$DEPLOY_BRANCH.server
            set +a
            make ${DEPLOY_BRANCH}-server-build-up