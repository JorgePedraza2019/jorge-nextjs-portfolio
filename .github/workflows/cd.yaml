name: CD-Workflow

on:
  workflow_run:
    workflows: ["CI-Workflow"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Set branch and server variables
        id: vars
        run: |
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          echo "DEPLOY_BRANCH=$BRANCH" >> $GITHUB_ENV

          if [[ "$BRANCH" == "dev" ]]; then
            echo "SERVER_IP=${{ secrets.SERVER_IP_DEV }}" >> $GITHUB_ENV
            echo "SERVER_USER=${{ secrets.SERVER_USER_DEV }}" >> $GITHUB_ENV
            echo "SERVER_SSH_KEY=${{ secrets.SERVER_SSH_KEY_DEV }}" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "qa" ]]; then
            echo "SERVER_IP=${{ secrets.SERVER_IP_QA }}" >> $GITHUB_ENV
            echo "SERVER_USER=${{ secrets.SERVER_USER_QA }}" >> $GITHUB_ENV
            echo "SERVER_SSH_KEY=${{ secrets.SERVER_SSH_KEY_QA }}" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "main" ]]; then
            echo "SERVER_IP=${{ secrets.SERVER_IP_PROD }}" >> $GITHUB_ENV
            echo "SERVER_USER=${{ secrets.SERVER_USER_PROD }}" >> $GITHUB_ENV
            echo "SERVER_SSH_KEY=${{ secrets.SERVER_SSH_KEY_PROD }}" >> $GITHUB_ENV
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi

      - name: SSH into server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: 22

      - name: Pull latest code and create .env file
        run: |
          cd /var/www/jorge-nextjs-portfolio/
          git pull origin $DEPLOY_BRANCH

          if [[ "$DEPLOY_BRANCH" == "dev" ]]; then
            ENV_FILE=".env.dev.server"
            NODE_ENV="${{ secrets.NODE_ENV_DEV }}"
            INSTALL_PLAYWRIGHT="${{ secrets.INSTALL_PLAYWRIGHT_DEV }}"
            INSTALL_DEV_LIBRARIES="${{ secrets.INSTALL_DEV_LIBRARIES_DEV }}"
            IMAGE_NAME="${{ secrets.IMAGE_NAME_DEV }}"
            NEXT_PORT="${{ secrets.NEXT_PORT_DEV }}"
            HOST_PORT="${{ secrets.HOST_PORT_DEV }}"
            ENV_FILE_NAME="${{ secrets.ENV_FILE_NAME_DEV }}"
            START_COMMAND="${{ secrets.START_COMMAND_DEV }}"
            NEXT_CONTAINER_NAME="${{ secrets.NEXT_CONTAINER_NAME_DEV }}"
            ENV_TYPE="${{ secrets.ENV_TYPE_DEV }}"
            NGINX_CONF_DIR="${{ secrets.NGINX_CONF_DIR_DEV }}"
            NGINX_CERTS_DIR="${{ secrets.NGINX_CERTS_DIR_DEV }}"
            NGINX_IMAGE_NAME="${{ secrets.NGINX_IMAGE_NAME_DEV }}"
            NGINX_PORT="${{ secrets.NGINX_PORT_DEV }}"
          elif [[ "$DEPLOY_BRANCH" == "qa" ]]; then
            ENV_FILE=".env.qa.server"
            NODE_ENV="${{ secrets.NODE_ENV_QA }}"
            INSTALL_PLAYWRIGHT="${{ secrets.INSTALL_PLAYWRIGHT_QA }}"
            INSTALL_DEV_LIBRARIES="${{ secrets.INSTALL_DEV_LIBRARIES_QA }}"
            IMAGE_NAME="${{ secrets.IMAGE_NAME_QA }}"
            NEXT_PORT="${{ secrets.NEXT_PORT_QA }}"
            HOST_PORT="${{ secrets.HOST_PORT_QA }}"
            ENV_FILE_NAME="${{ secrets.ENV_FILE_NAME_QA }}"
            START_COMMAND="${{ secrets.START_COMMAND_QA }}"
            NEXT_CONTAINER_NAME="${{ secrets.NEXT_CONTAINER_NAME_QA }}"
            ENV_TYPE="${{ secrets.ENV_TYPE_QA }}"
            NGINX_CONF_DIR="${{ secrets.NGINX_CONF_DIR_QA }}"
            NGINX_CERTS_DIR="${{ secrets.NGINX_CERTS_DIR_QA }}"
            NGINX_IMAGE_NAME="${{ secrets.NGINX_IMAGE_NAME_QA }}"
            NGINX_PORT="${{ secrets.NGINX_PORT_QA }}"
          elif [[ "$DEPLOY_BRANCH" == "main" ]]; then
            ENV_FILE=".env.prod.server"
            NODE_ENV="${{ secrets.NODE_ENV_PROD }}"
            INSTALL_PLAYWRIGHT="${{ secrets.INSTALL_PLAYWRIGHT_PROD }}"
            INSTALL_DEV_LIBRARIES="${{ secrets.INSTALL_DEV_LIBRARIES_PROD }}"
            IMAGE_NAME="${{ secrets.IMAGE_NAME_PROD }}"
            NEXT_PORT="${{ secrets.NEXT_PORT_PROD }}"
            HOST_PORT="${{ secrets.HOST_PORT_PROD }}"
            ENV_FILE_NAME="${{ secrets.ENV_FILE_NAME_PROD }}"
            START_COMMAND="${{ secrets.START_COMMAND_PROD }}"
            NEXT_CONTAINER_NAME="${{ secrets.NEXT_CONTAINER_NAME_PROD }}"
            ENV_TYPE="${{ secrets.ENV_TYPE_PROD }}"
            NGINX_CONF_DIR="${{ secrets.NGINX_CONF_DIR_PROD }}"
            NGINX_CERTS_DIR="${{ secrets.NGINX_CERTS_DIR_PROD }}"
            NGINX_IMAGE_NAME="${{ secrets.NGINX_IMAGE_NAME_PROD }}"
            NGINX_PORT="${{ secrets.NGINX_PORT_PROD }}"
          fi

          mkdir -p env/$DEPLOY_BRANCH
          echo "NODE_ENV=$NODE_ENV" > env/$DEPLOY_BRANCH/$ENV_FILE
          echo "INSTALL_PLAYWRIGHT=$INSTALL_PLAYWRIGHT" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "INSTALL_DEV_LIBRARIES=$INSTALL_DEV_LIBRARIES" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "IMAGE_NAME=$IMAGE_NAME" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "NEXT_PORT=$NEXT_PORT" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "HOST_PORT=$HOST_PORT" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "ENV_FILE_NAME=$ENV_FILE_NAME" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "START_COMMAND=$START_COMMAND" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "NEXT_CONTAINER_NAME=$NEXT_CONTAINER_NAME" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "ENV_TYPE=$ENV_TYPE" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "NGINX_CONF_DIR=$NGINX_CONF_DIR" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "NGINX_CERTS_DIR=$NGINX_CERTS_DIR" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "NGINX_IMAGE_NAME=$NGINX_IMAGE_NAME" >> env/$DEPLOY_BRANCH/$ENV_FILE
          echo "NGINX_PORT=$NGINX_PORT" >> env/$DEPLOY_BRANCH/$ENV_FILE

      - name: Build frontend image
        run: |
          if [[ "$DEPLOY_BRANCH" == "main" ]]; then
            docker build --build-arg NODE_ENV=$NODE_ENV --build-arg INSTALL_PLAYWRIGHT=$INSTALL_PLAYWRIGHT --build-arg INSTALL_DEV_LIBRARIES=$INSTALL_DEV_LIBRARIES -t ${{ secrets.DOCKER_USERNAME }}/jorge-portfolio-frontend-app-prod-server-image:latest -f Dockerfile.nextjs .
            docker push ${{ secrets.DOCKER_USERNAME }}/jorge-portfolio-frontend-app-prod-server-image:latest
          else
            docker build --build-arg NODE_ENV=$NODE_ENV --build-arg INSTALL_PLAYWRIGHT=$INSTALL_PLAYWRIGHT --build-arg INSTALL_DEV_LIBRARIES=$INSTALL_DEV_LIBRARIES -t jorge-portfolio-frontend-app-${DEPLOY_BRANCH}-server-image:latest -f Dockerfile.nextjs .
          fi

      - name: Build and push Nginx image
        run: |
          if [[ "$DEPLOY_BRANCH" == "main" ]]; then
            docker build --build-arg NGINX_CONF_DIR=$NGINX_CONF_DIR --build-arg NGINX_CERTS_DIR=$NGINX_CERTS_DIR --build-arg ENV_TYPE=$ENV_TYPE -t ${{ secrets.DOCKER_USERNAME }}/jorge-portfolio-frontend-nginx-prod-server-image:latest -f docker/nginx/Dockerfile.nginx .
            docker push ${{ secrets.DOCKER_USERNAME }}/jorge-portfolio-frontend-nginx-prod-server-image:latest
          else
            docker build --build-arg NGINX_CONF_DIR=$NGINX_CONF_DIR --build-arg NGINX_CERTS_DIR=$NGINX_CERTS_DIR --build-arg ENV_TYPE=$ENV_TYPE -t jorge-portfolio-frontend-nginx-${DEPLOY_BRANCH}-server-image:latest -f docker/nginx/Dockerfile.nginx .
          fi

      - name: Deploy containers using Docker Compose
        run: |
          docker-compose --env-file ./env/$DEPLOY_BRANCH/$ENV_FILE -p jorge-portfolio-frontend-${DEPLOY_BRANCH}-server -f docker/docker-compose.yaml -f docker/docker-compose-nginx.yaml up --build -d