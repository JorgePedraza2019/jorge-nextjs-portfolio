# CI-Workflow
# Reusable CI pipeline triggered from other workflows via `workflow_call`.
# Based on the branch, it loads environment-specific secrets, builds Docker containers,
# installs dependencies, runs linting, tests, and performs cleanup.

name: CI-Workflow

on:
  workflow_call:
    secrets:
      # Secrets for FEATURE branches
      ENV_VARS_FEATURE_CI: { required: true }

      # Secrets for DEV branch
      ENV_VARS_DEV_CI: { required: true }

      # Secrets for QA branch
      ENV_VARS_QA_CI: { required: true }

      # Secrets for PROD (main) branch
      ENV_VARS_PROD_CI: { required: true }

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        # Clone the repository into the runner to access source code
        uses: actions/checkout@v2

      - name: Install Docker Compose
        # Ensure Docker Compose is installed on the runner (required for container orchestration)
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Set environment variables based on branch
        # Generate the appropriate `.env` file dynamically depending on the current Git branch
        # These are used by Docker Compose to configure environment variables inside containers
        run: |
          # Extract the branch name (e.g., 'dev', 'qa', 'main', or 'feature/xyz')
          BRANCH_NAME="${GITHUB_REF##*/}"

          # Determine environment directory
          if [[ "$BRANCH_NAME" == "dev" || "$BRANCH_NAME" == "qa" || "$BRANCH_NAME" == "main" ]]; then
            ENV_DIR="env/$BRANCH_NAME"
            mkdir -p "$ENV_DIR"

            # Inject the correct secrets based on the branch
            if [[ "$BRANCH_NAME" == "dev" ]]; then
              echo -e "${{ secrets.ENV_VARS_DEV_CI }}" > "$ENV_DIR/ci.env"
            elif [[ "$BRANCH_NAME" == "qa" ]]; then
              echo -e "${{ secrets.ENV_VARS_QA_CI }}" > "$ENV_DIR/ci.env"
            elif [[ "$BRANCH_NAME" == "main" ]]; then
              echo -e "${{ secrets.ENV_VARS_PROD_CI }}" > "$ENV_DIR/ci.env"
            fi
          else
            # For any other branches (e.g., feature/*), use the feature env
            ENV_DIR="env/feature"
            mkdir -p "$ENV_DIR"
            echo -e "${{ secrets.ENV_VARS_FEATURE_CI }}" > "$ENV_DIR/ci.env"
          fi

      - name: Set up Docker Compose and run container
        # Start Docker container with appropriate environment file and compose project
        run: |
          echo "Branch: ${{ github.ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker-compose --env-file env/dev/ci.env -p jorge-portfolio-frontend-dev-server -f docker/docker-compose.yaml up -d --build
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            docker-compose --env-file env/qa/ci.env -p jorge-portfolio-frontend-qa-server -f docker/docker-compose.yaml up -d --build
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker-compose --env-file env/prod/ci.env -p jorge-portfolio-frontend-prod-server -f docker/docker-compose.yaml up -d --build
          else
            docker-compose --env-file env/feature/ci.env -p jorge-portfolio-frontend-feature-local -f docker/docker-compose.yaml -f docker/docker-compose-override-feature.yaml up -d --build
          fi

      - name: Install dependencies in Docker container
        # Only install dev dependencies in dev/qa environments. In prod, just run with predefined setup.
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker-compose --env-file env/dev/ci.env -p jorge-portfolio-frontend-dev-server -f docker/docker-compose.yaml exec -T frontend sh -c 'export NODE_ENV=development && npm install --only=dev --legacy-peer-deps'
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            docker-compose --env-file env/qa/ci.env -p jorge-portfolio-frontend-qa-server -f docker/docker-compose.yaml exec -T frontend sh -c 'export NODE_ENV=development && npm install --only=dev --legacy-peer-deps'
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker-compose --env-file env/prod/ci.env -p jorge-portfolio-frontend-prod-server -f docker/docker-compose.yaml exec -T frontend sh -c 'export NODE_ENV=development'
          else
            echo "Skipping installation in non-dev, non-qa, and non-prod branches."
          fi

      - name: Run ESLint in Docker
        # Run code linting only in 'dev' or 'feature/*' branches
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.ref }}" =~ refs/heads/feature/.* ]]; then
            if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
              docker-compose --env-file env/dev/ci.env -p jorge-portfolio-frontend-dev-server -f docker/docker-compose.yaml exec -T frontend npm run lint
            else
              docker-compose --env-file env/feature/ci.env -p jorge-portfolio-frontend-feature-local -f docker/docker-compose.yaml exec -T frontend npm run lint
            fi
          else
            echo "Skipping ESLint in non-dev and non-feature branches."
          fi

      - name: Run Jest in Docker
        # Run unit tests with Jest in dev branch only
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker-compose --env-file env/dev/ci.yaml -p jorge-portfolio-frontend-dev-server -f docker/docker-compose.yaml exec -T frontend npm test
          else
            echo "Skipping Jest tests for branch ${{ github.ref }} as tests are only run on the 'dev' branch"
          fi

      - name: Run Playwright in Docker
        # Run E2E tests with Playwright in dev and qa branches
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker-compose --env-file env/dev/ci.env -p jorge-portfolio-frontend-dev-server -f docker/docker-compose.yaml exec -T frontend npx playwright test
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            docker-compose --env-file env/qa/ci.env -p jorge-portfolio-frontend-qa-server -f docker/docker-compose.yaml exec -T frontend npx playwright test
          else
            echo "Skipping Playwright tests for branch ${{ github.ref }} as tests are only run on the 'dev' and 'qa' branch."
          fi

      - name: Stop and Remove Docker Containers
        # Clean up Docker containers after the job to avoid resource leaks or conflicts
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker-compose --env-file env/dev/ci.env -f docker/docker-compose.yaml down
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            docker-compose --env-file env/qa/ci.env -f docker/docker-compose.qa.yaml down
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker-compose --env-file env/prod/ci.env -f docker/docker-compose.prod.yaml down
          else
            docker-compose --env-file env/feature/.env.feature.local -f docker/docker-compose.yaml down
          fi