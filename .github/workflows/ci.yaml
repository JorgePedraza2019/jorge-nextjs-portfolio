# CI-Workflow
# Reusable CI pipeline triggered from other workflows via `workflow_call`.
# Based on the branch, it loads environment-specific secrets, builds Docker containers,
# installs dependencies, runs linting, tests, and performs cleanup.

name: CI-Workflow

on:
  workflow_call:
    secrets:
      # Secrets for FEATURE branches
      ENV_VARS_FEATURE_CI: { required: true }
      # Secrets for DEV branch
      ENV_VARS_DEV_CI: { required: true }
      # Secrets for QA branch
      ENV_VARS_QA_CI: { required: true }
      # Secrets for MAIN branch
      ENV_VARS_MAIN_CI: { required: true }

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        # Clone the repository into the runner to access source code
        uses: actions/checkout@v2

      - name: Install Docker Compose
        # Ensure Docker Compose is installed on the runner (required for container orchestration)
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Set environment variables based on branch
        # Generate the appropriate `.env` file dynamically depending on the current Git branch
        # These are used by Docker Compose to configure environment variables inside containers
        run: |
          # Extract the branch name (e.g., 'dev', 'qa', 'main', or 'feature/xyz')
          BRANCH_NAME="${GITHUB_REF##*/}"

          # Determine environment directory
          if [[ "$BRANCH_NAME" == "dev" || "$BRANCH_NAME" == "qa" || "$BRANCH_NAME" == "main" ]]; then
            ENV_DIR="env/$BRANCH_NAME"
            mkdir -p "$ENV_DIR"

            # Inject the correct secrets based on the branch
            if [[ "$BRANCH_NAME" == "dev" ]]; then
              echo -e "${{ secrets.ENV_VARS_DEV_CI }}" > "$ENV_DIR/ci.env"
            elif [[ "$BRANCH_NAME" == "qa" ]]; then
              echo -e "${{ secrets.ENV_VARS_QA_CI }}" > "$ENV_DIR/ci.env"
            elif [[ "$BRANCH_NAME" == "main" ]]; then
              echo -e "${{ secrets.ENV_VARS_MAIN_CI }}" > "$ENV_DIR/ci.env"
            fi
          else
            # For any other branches (e.g., feature/*), use the feature env
            ENV_DIR="env/feature"
            mkdir -p "$ENV_DIR"
            echo -e "${{ secrets.ENV_VARS_FEATURE_CI }}" > "$ENV_DIR/ci.env"
          fi

      - name: Start containers
        run: |
          case "${{ github.ref }}" in
            refs/heads/dev)   make dev-ci-build-up ;;
            refs/heads/qa)    make qa-ci-build-up ;;
            refs/heads/main)  make main-ci-build-up ;;
            *)                make feature-ci-build-up ;;
          esac

      - name: Install dependencies
        run: |
          case "${{ github.ref }}" in
            refs/heads/dev) make dev-ci-install-deps ;;
            refs/heads/qa)  make qa-ci-install-deps ;;
            *)              echo "Skipping deps" ;;
          esac

      - name: Run ESLint
        run: |
          case "${{ github.ref }}" in
            refs/heads/dev)            make dev-ci-lint ;;
            refs/heads/feature/*)      make feature-ci-lint ;;
            *)                         echo "Skipping lint" ;;
          esac

      - name: Run Jest
        run: |
          [[ "${{ github.ref }}" == "refs/heads/dev" ]] && make dev-ci-jest || echo "Skipping Jest"

      - name: Run Playwright
        run: |
          case "${{ github.ref }}" in
            refs/heads/dev) make dev-ci-playwright ;;
            refs/heads/qa)  make qa-ci-playwright ;;
            *)              echo "Skipping Playwright" ;;
          esac

      - name: Teardown containers
        # Clean up Docker containers after the job to avoid resource leaks or conflicts
        run: |
          case "${{ github.ref }}" in
            refs/heads/dev)   make dev-ci-down ;;
            refs/heads/qa)    make qa-ci-down ;;
            refs/heads/main)  make main-ci-down ;;
            *)                make feature-ci-down ;;
          esac