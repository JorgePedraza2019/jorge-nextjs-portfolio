name: CI

# Trigger the workflow on push events to the specified branches
on:
  push:
    branches:
      - dev # Trigger on pushes to the dev branch
      - qa # Trigger on pushes to the qa branch
      - main # Trigger on pushes to the main branch
      - feature/** # Trigger on pushes to any feature branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2 # Check out the repository code
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose  # Add Docker Compose installation
      - name: Set environment variables based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "NODE_ENV=${{ secrets.NODE_ENV_DEV }}" >> .env
            echo "NEXT_PORT=${{ secrets.NEXT_PORT_DEV }}" >> .env
            echo "HOST_PORT=${{ secrets.HOST_PORT_DEV }}" >> .env
            echo "NEXT_CONTAINER_NAME=${{ secrets.NEXT_CONTAINER_NAME_DEV }}" >> .env
            echo "INSTALL_PLAYWRIGHT=${{ secrets.INSTALL_PLAYWRIGHT_DEV }}" >> .env
            echo "INSTALL_DEV_LIBRARIES=${{ secrets.INSTALL_DEV_LIBRARIES_DEV }}" >> .env
            echo "IMAGE_NAME=${{ secrets.IMAGE_NAME_DEV }}" >> .env
            echo "ENV_FILE_NAME=${{ secrets.ENV_FILE_NAME_DEV }}" >> .env
            echo "START_COMMAND=${{ secrets.START_COMMAND_DEV }}" >> .env
            echo "USE_VOLUMES=${{ secrets.USE_VOLUMES_DEV }}" >> .env
            echo "USE_VOLUMES_NODE_MODULES=${{ secrets.USE_VOLUMES_NODE_MODULES_DEV }}" >> .env
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            echo "NODE_ENV=${{ secrets.NODE_ENV_QA }}" >> .env
            echo "NEXT_PORT=${{ secrets.NEXT_PORT_QA }}" >> .env
            echo "HOST_PORT=${{ secrets.HOST_PORT_QA }}" >> .env
            echo "NEXT_CONTAINER_NAME=${{ secrets.NEXT_CONTAINER_NAME_QA }}" >> .env
            echo "INSTALL_PLAYWRIGHT=${{ secrets.INSTALL_PLAYWRIGHT_QA }}" >> .env
            echo "INSTALL_DEV_LIBRARIES=${{ secrets.INSTALL_DEV_LIBRARIES_QA }}" >> .env
            echo "IMAGE_NAME=${{ secrets.IMAGE_NAME_QA }}" >> .env
            echo "ENV_FILE_NAME=${{ secrets.ENV_FILE_NAME_QA }}" >> .env
            echo "START_COMMAND=${{ secrets.START_COMMAND_QA }}" >> .env
            echo "USE_VOLUMES=${{ secrets.USE_VOLUMES_QA }}" >> .env
            echo "USE_VOLUMES_NODE_MODULES=${{ secrets.USE_VOLUMES_NODE_MODULES_QA }}" >> .env
  
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "NODE_ENV=${{ secrets.NODE_ENV_PROD }}" >> .env
            echo "NEXT_PORT=${{ secrets.NEXT_PORT_PROD }}" >> .env
            echo "HOST_PORT=${{ secrets.HOST_PORT_PROD }}" >> .env
            echo "NEXT_CONTAINER_NAME=${{ secrets.NEXT_CONTAINER_NAME_PROD }}" >> .env
            echo "INSTALL_PLAYWRIGHT=${{ secrets.INSTALL_PLAYWRIGHT_PROD }}" >> .env
            echo "INSTALL_DEV_LIBRARIES=${{ secrets.INSTALL_DEV_LIBRARIES_PROD }}" >> .env
            echo "IMAGE_NAME=${{ secrets.IMAGE_NAME_PROD }}" >> .env
            echo "ENV_FILE_NAME=${{ secrets.ENV_FILE_NAME_PROD }}" >> .env
            echo "START_COMMAND=${{ secrets.START_COMMAND_PROD }}" >> .env
            echo "USE_VOLUMES=${{ secrets.USE_VOLUMES_PROD }}" >> .env
            echo "USE_VOLUMES_NODE_MODULES=${{ secrets.USE_VOLUMES_NODE_MODULES_PROD }}" >> .env
  
          else
            echo "NODE_ENV=${{ secrets.NODE_ENV_FEATURE }}" >> .env
            echo "NEXT_PORT=${{ secrets.NEXT_PORT_FEATURE }}" >> .env
            echo "HOST_PORT=${{ secrets.HOST_PORT_FEATURE }}" >> .env
            echo "NEXT_CONTAINER_NAME=${{ secrets.NEXT_CONTAINER_NAME_FEATURE }}" >> .env
            echo "INSTALL_PLAYWRIGHT=${{ secrets.INSTALL_PLAYWRIGHT_FEATURE }}" >> .env
            echo "INSTALL_DEV_LIBRARIES=${{ secrets.INSTALL_DEV_LIBRARIES_FEATURE }}" >> .env
            echo "IMAGE_NAME=${{ secrets.IMAGE_NAME_FEATURE }}" >> .env
            echo "ENV_FILE_NAME=${{ secrets.ENV_FILE_NAME_FEATURE }}" >> .env
            echo "START_COMMAND=${{ secrets.START_COMMAND_FEATURE }}" >> .env
            echo "USE_VOLUMES=${{ secrets.USE_VOLUMES_FEATURE }}" >> .env
            echo "USE_VOLUMES_NODE_MODULES=${{ secrets.USE_VOLUMES_NODE_MODULES_FEATURE }}" >> .env
          fi
      - name: Set up Docker Compose and run container
        run: |
          echo "Branch: ${{ github.ref }}"  # Print the current GitHub reference (branch) to verify its value
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then  # If the branch is 'dev'
            docker-compose --env-file .env -p jorge-portfolio-frontend-dev-server -f docker/docker-compose.yaml -f docker/docker-compose-override-port.yaml up -d --build  # Use the dev Docker Compose file to start the container
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then  # If the branch is 'qa'
            docker-compose --env-file .env -p jorge-portfolio-frontend-qa-server -f docker/docker-compose.yaml -f docker/qa/docker-compose-override-port.yaml up -d --build  # Use the qa Docker Compose file to start the container
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then  # If the branch is 'main'
            docker-compose --env-file .env -p jorge-portfolio-frontend-prod-server -f docker/docker-compose.yaml -f docker/prod/docker-compose-override-port.yaml up -d --build  # Use the prod Docker Compose file to start the container
          else  # If it's a feature branch or any other branch
            docker-compose --env-file .env -p jorge-portfolio-frontend-feature-local -f docker/docker-compose.yaml -f docker/docker-compose-override-feature.yaml up -d --build  # Use the feature Docker Compose file to start the container
          fi
      - name: Install dependencies in Docker container
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker-compose --env-file .env -p jorge-portfolio-frontend-dev-server -f docker/docker-compose.yaml exec -T frontend sh -c 'export NODE_ENV=development && npm install --only=dev --legacy-peer-deps'
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            docker-compose --env-file .env -p jorge-portfolio-frontend-qa-server -f docker/qa/docker-compose.qa.yaml exec -T frontend sh -c 'export NODE_ENV=development && npm install --only=dev --legacy-peer-deps'
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker-compose --env-file .env -p jorge-portfolio-frontend-prod-server -f docker/prod/docker-compose.prod.yaml exec -T frontend sh -c 'export NODE_ENV=development'
          else
            echo "Skipping installation in non-dev, non-qa, and non-prod branches."
          fi
      - name: Run ESLint in Docker
        # Use dev or local docker-compose file depending on the branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.ref }}" =~ refs/heads/feature/.* ]]; then
            # If the branch is dev or feature/*
            if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
              docker-compose --env-file .env -p jorge-portfolio-frontend-dev-server -f docker/docker-compose.yaml exec -T frontend npm run lint
            else
              docker-compose --env-file .env -p jorge-portfolio-frontend-feature-local -f docker/docker-compose.yaml exec -T frontend npm run lint
            fi
          else
            echo "Skipping ESLint in non-dev and non-feature branches."
          fi
      - name: Run Jest in Docker
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker-compose --env-file .env -p jorge-nextjs-portfolio-dev-server -f docker/docker-compose.yaml exec -T frontend npm test
          else
            echo "Skipping Jest tests for branch ${{ github.ref }} as tests are only run on the 'dev' branch"
          fi
      - name: Run Playwright in Docker
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker-compose --env-file .env -p jorge-nextjs-portfolio-dev-server -f docker/docker-compose.yaml exec -T frontend npx playwright test
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            docker-compose --env-file .env -p jorge-nextjs-portfolio-qa-server -f docker/qa/docker-compose.qa.yaml exec -T frontend npx playwright test
          else
            echo "Skipping Playwright tests for branch ${{ github.ref }} as tests are only run on the 'dev' and 'qa' branch."
          fi
      - name: Stop and Remove Docker Containers
        run: |
          # Stop and remove containers based on the branch
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker-compose --env-file .env -f docker/docker-compose.yaml down
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            docker-compose --env-file .env -f docker/qa/docker-compose.qa.yaml down
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker-compose --env-file .env -f docker/prod/docker-compose.prod.yaml down
          else
            docker-compose --env-file .env -f docker/docker-compose.yaml down
          fi